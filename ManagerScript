#coding: utf-8
import math
import tkinter as tk
import time


#menu

from tkinter import *
rootMenu = Tk()
#commands нужно добавить другие

def Scale(n):
    global lifeScale
    lifeScale = n

def Speed(n):
    global lifeSpeed
    lifeSpeed = n

n = 0
m = 0
mass1 = [[0 for j in range(m)] for i in range(n)]
mass2 = [[0 for j in range(m)] for i in range(n)]

def CellUpdate():
    global n,m,generationCounter,mass1,mass2
    for i in range(n):
        for j in range(m):

            if mass1[i][j]==1:
                print(i,' ',j)



            #считаем живых соседей
            neidgboursAlive = 0

            k = (n + i - 1) % n
            if mass1[k][j] == 1:
                neidgboursAlive+=1

            k = (n + i + 1) % n
            if mass1[k][j] == 1:
                neidgboursAlive += 1

            k = (n + i - 1) % n
            l = (m + j - 1) % m
            if mass1[k][l] == 1:
                neidgboursAlive += 1

            k = (n + i - 1) % n
            l = (m + j + 1) % m
            if mass1[k][l] == 1:
                neidgboursAlive += 1

            k = (n + i + 1) % n
            l = (m + j - 1) % m
            if mass1[k][l] == 1:
                neidgboursAlive += 1

            k = (n + i + 1) % n
            l = (m + j + 1) % m
            if mass1[k][l] == 1:
                neidgboursAlive += 1

            l = (m + j - 1) % m
            if mass1[i][l] == 1:
                neidgboursAlive += 1

            l = (m + j + 1) % m
            if mass1[i][l] == 1:
                neidgboursAlive += 1

            if neidgboursAlive>0:
                print(neidgboursAlive,' ', i,' ', j, ' ', "neidgbours:",'(',i-1, ',',j,')',mass1[i-1][j],' ','(',i+1, ',',j,')',mass1[i+1][j],' ','(',i-1, ',',j-1,')',mass1[i-1][j-1],' ','(',i-1, ',',j+1,')',mass1[i-1][j+1],' ','(',i+1, ',',j-1,')',mass1[i+1][j-1],' ','(',i+1, ',',j+1,')',mass1[i+1][j+1],' ','(',i, ',',j-1,')',mass1[i][j-1],' ','(',i, ',',j+1,')',mass1[i][j+1],' ' )

            #считаем следующее поколение в соответствии с правилами
            if mass1[i][j] == 1:
                if neidgboursAlive == 2 or neidgboursAlive == 3 :
                    mass2[i][j] = 1
                else:
                    mass2[i][j] = 0
            else:
                if neidgboursAlive == 3:
                    mass2[i][j] = 1
                    print("hello world")
                else:
                    mass2[i][j] = 0

    generationCounter += 1

def Filling():
    for j in range(0, m):
        for i in range(0, n):
            if mass2[i][j] == 0:
                canv.create_rectangle(i * 10, j * 10, (i + 1) * 10, (j + 1) * 10, fill='Black', outline='Pink')
            else:
                canv.create_rectangle(i * 10, j * 10, (i + 1) * 10, (j + 1) * 10, fill='White', outline='Pink')

#перекрашиваем клетку на которую тыкнули
def MouceClick(event):
    global mass2
    x = math.floor(event.x / 10)
    y = math.floor(event.y / 10)
    print(x,y)
    mass2[x][y] = (mass2[x][y] + 1) % 2

def TimeShift(event):
    global ifTime
    ifTime = (ifTime + 1) % 2
    print(ifTime)

def CheckButtons():
    global root
    root.bind('<1>',MouceClick)
    root.bind('<space>',TimeShift)

def MassEqual():
    global mass1, mass2
    for i in range(n):
        for j in range(m):
            mass1[i][j] = mass2[i][j]

def Update():
    global generationCounter, ifTime, mass2, mass1
#    print(generationCounter)
    CheckButtons()
    if ifTime:
        CellUpdate()
    Filling()
    MassEqual()
    root.after(100,Update)

def Start():
    global root,canv,lifeScale,lifeSpeed,ifTime,generationCounter,n,m,mass1,mass2
    root = tk.Tk()
    #fr = tk.Frame(root)
    n = math.floor(lifeScale)
    m = math.floor(lifeScale * 3 / 4)
    s = str(n * 10) + "x" + str(m * 10)
    root.geometry(s)
    canv = tk.Canvas(root, bg='pink')
    canv.pack(fill=tk.BOTH, expand=1)

    # заполняем 0-ми массивы

    mass1 = [[0 for j in range(m)] for i in range(n)]
    mass2 = [[0 for j in range(m)] for j in range(n)]
    print(lifeScale) #масштаб
    print(lifeSpeed) #скорость
    ifTime = 0 #остановка времени 0-если время стоит
    generationCounter = 0
    Update()
    root.mainloop()


menubar = Menu(rootMenu)

#General
filemenu = Menu(menubar, tearoff=0)
#filemenu.add_command(label="Open", command=hello)
#filemenu.add_command(label="Save", command=hello)
#filemenu.add_separator()
filemenu.add_command(label="Exit", command=rootMenu.quit)
menubar.add_cascade(label="File", menu=filemenu)
#lifeScale
editmenu = Menu(menubar, tearoff=0)
editmenu.add_command(label="200", command=Scale(200))
editmenu.add_command(label="100", command=Scale(100))
editmenu.add_command(label="50", command=Scale(50))
menubar.add_cascade(label="lifeScale", menu=editmenu)
#lifeSpeed
editmenu = Menu(menubar, tearoff=0)
editmenu.add_command(label="1", command=Speed(1))
editmenu.add_command(label="2", command=Speed(2))
editmenu.add_command(label="3", command=Speed(3))
menubar.add_cascade(label="lifeSpeed", menu=editmenu)
#Play
editmenu = Menu(menubar, tearoff=5)
menubar.add_command(label="Play",command=Start)
# display the menu
rootMenu.config(menu=menubar)
rootMenu.mainloop()
